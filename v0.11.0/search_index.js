var documenterSearchIndex = {"docs":
[{"location":"cn0_estimator.html#CN0-Estimator-1","page":"CN0 Estimator","title":"CN0 Estimator","text":"","category":"section"},{"location":"cn0_estimator.html#","page":"CN0 Estimator","title":"CN0 Estimator","text":"The default CN0 estimator is the Moment Method called MomentsCN0Estimator.","category":"page"},{"location":"cn0_estimator.html#","page":"CN0 Estimator","title":"CN0 Estimator","text":"You can easily add your own estimator. To do that you have to implement your own structure MyCN0Estimator <: AbstractCN0Estimator and the following functions: update(cn0_estimator::MyCN0Estimator, prompt) and estimate_cn0(cn0_estimator::MomentsCN0Estimator, integration_time).","category":"page"},{"location":"cn0_estimator.html#","page":"CN0 Estimator","title":"CN0 Estimator","text":"Thereby, you can pass your CN0 estimator to the TrackingState by calling","category":"page"},{"location":"cn0_estimator.html#","page":"CN0 Estimator","title":"CN0 Estimator","text":"TrackingState(GPSL1, carrier_doppler, code_phase, cn0_estimator = MyCN0Estimator())","category":"page"},{"location":"correlator.html#Correlator-1","page":"Correlator","title":"Correlator","text":"","category":"section"},{"location":"correlator.html#","page":"Correlator","title":"Correlator","text":"The default correlator is given by get_default_correlator(::Type{AbstractGNSSSystem}, num_ants::NumAnts{N}). That is for example the EarlyPromptLateCorrelator for GPSL1.","category":"page"},{"location":"correlator.html#","page":"Correlator","title":"Correlator","text":"You can easily add your own correlator. For that you have define your own MyCorrelator <: AbstractCorrelator and implement various functions, that you find in src/correlator.jl","category":"page"},{"location":"loop_filter.html#Loop-Filter-1","page":"Loop Filter","title":"Loop Filter","text":"","category":"section"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"The default loop filter are provided by TrackingLoopFilters.jl. This includes","category":"page"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"first order loop filter FirstOrderLF\nsecond order biliner loop filter SecondOrderBilinearLF\nsecond order boxcar loop filter SecondOrderBoxcarLF\nthird order bilinear loop filter ThirdOrderBilinarLF\nthird order boxcar loop filter ThirdOrderBoxcarLF","category":"page"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"The default loop filter for the carrier loop is ThirdOrderBilinarLF and the default loop filter for the code loop is SecondOrderBilinearLF. This is set by the initialization of the TrackingState and can be changed by:","category":"page"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"state = TrackingState(\n  GPSL1,\n  carrier_doppler,\n  code_phase,\n  carrier_loop_filter = ThirdOrderBilinearLF(),\n  code_loop_filter = SecondOrderBilinearLF()\n)","category":"page"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"The bandwidth of the loop filter is set by the track function:","category":"page"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"next_results = track(\n  next_signal,\n  get_state(results),\n  prn,\n  sample_frequency,\n  carrier_loop_filter_bandwidth = 18Hz,\n  code_loop_filter_bandwidth = 1Hz\n)","category":"page"},{"location":"loop_filter.html#","page":"Loop Filter","title":"Loop Filter","text":"You can easily implement a custom loop filter MyLoopFilter <: AbstractLoopFilter. In this case, a specialized propagate and get_filter_output is needed. For more information refer to TrackingLoopFilters.jl.","category":"page"},{"location":"track.html#Track-1","page":"Track","title":"Track","text":"","category":"section"},{"location":"track.html#","page":"Track","title":"Track","text":"track","category":"page"},{"location":"track.html#Tracking.track","page":"Track","title":"Tracking.track","text":"track(signal, state, prn, sample_frequency; post_corr_filter, intermediate_frequency, max_integration_time, min_integration_time, early_late_sample_shift, carrier_loop_filter_bandwidth, code_loop_filter_bandwidth, velocity_aiding)\n\n\nTrack the signal signal based on the current tracking state, the sample frequency sample_frequency and PRN prn. Optional configurations are:\n\nPost correlation filter post_corr_filter defaults to get_default_post_corr_filter(...)\nIntermediate frequency intermediate_frequency defaults to 0Hz\nMaximal integration time max_integration_time defaults to 1ms. The actual integration time can be less in order to find the secondary code or the bit shift. Once this is found the integration time is identical to the maximal integration time.\nMinimal integration time min_integration_time defaults to 0.75ms. It's the minimal integration time, that leads to a valid correlation result. It is only used for the first integration period.\nSample shift between early and late early_late_sample_shift defaults to get_early_late_sample_shift(...)\nBandwidth of the carrier loop carrier_loop_filter_bandwidth defaults to 18Hz\nBandwidth of the code loop code_loop_filter_bandwidth defaults to 1Hz\nVelocity aiding velocity_aiding defaults to 0Hz\n\n\n\n\n\n","category":"function"},{"location":"track.html#","page":"Track","title":"Track","text":"get_early_late_sample_shift","category":"page"},{"location":"track.html#Tracking.get_early_late_sample_shift","page":"Track","title":"Tracking.get_early_late_sample_shift","text":"get_early_late_sample_shift(?, correlator, sample_frequency, preferred_code_shift)\n\n\nCalculate the shift between the early and late in samples.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#Tracking-Results-1","page":"Tracking Results","title":"Tracking Results","text":"","category":"section"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"Tracking.TrackingResults","category":"page"},{"location":"tracking_results.html#Tracking.TrackingResults","page":"Tracking Results","title":"Tracking.TrackingResults","text":"TrackingResults that hold the correlation results.\n\n\n\n\n\n","category":"type"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_early(::Tracking.TrackingResults)","category":"page"},{"location":"tracking_results.html#Tracking.get_early-Tuple{Tracking.TrackingResults}","page":"Tracking Results","title":"Tracking.get_early","text":"get_early(results)\n\n\nGet the early of the tracking result.\n\n\n\n\n\n","category":"method"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_prompt(::Tracking.TrackingResults)","category":"page"},{"location":"tracking_results.html#Tracking.get_prompt-Tuple{Tracking.TrackingResults}","page":"Tracking Results","title":"Tracking.get_prompt","text":"get_prompt(results)\n\n\nGet the prompt of the tracking result.\n\n\n\n\n\n","category":"method"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_late(::Tracking.TrackingResults)","category":"page"},{"location":"tracking_results.html#Tracking.get_late-Tuple{Tracking.TrackingResults}","page":"Tracking Results","title":"Tracking.get_late","text":"get_late(results)\n\n\nGet the late of the tracking result.\n\n\n\n\n\n","category":"method"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_correlator","category":"page"},{"location":"tracking_results.html#Tracking.get_correlator","page":"Tracking Results","title":"Tracking.get_correlator","text":"get_correlator(results)\n\n\nGet the correlator of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_carrier_doppler","category":"page"},{"location":"tracking_results.html#Tracking.get_carrier_doppler","page":"Tracking Results","title":"Tracking.get_carrier_doppler","text":"get_carrier_doppler(results)\n\n\nGet the carrier doppler of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_carrier_phase","category":"page"},{"location":"tracking_results.html#Tracking.get_carrier_phase","page":"Tracking Results","title":"Tracking.get_carrier_phase","text":"get_carrier_phase(results)\n\n\nGet the carrier phase of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_code_doppler","category":"page"},{"location":"tracking_results.html#Tracking.get_code_doppler","page":"Tracking Results","title":"Tracking.get_code_doppler","text":"get_code_doppler(results)\n\n\nGet the code doppler of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_code_phase","category":"page"},{"location":"tracking_results.html#Tracking.get_code_phase","page":"Tracking Results","title":"Tracking.get_code_phase","text":"get_code_phase(results)\n\n\nGet the code phase of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_secondary_code_or_bit_found","category":"page"},{"location":"tracking_results.html#Tracking.get_secondary_code_or_bit_found","page":"Tracking Results","title":"Tracking.get_secondary_code_or_bit_found","text":"get_secondary_code_or_bit_found(results)\n\n\nCheck if the secondary code or bit has been found.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_state","category":"page"},{"location":"tracking_results.html#Tracking.get_state","page":"Tracking Results","title":"Tracking.get_state","text":"get_state(results)\n\n\nGet state of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"tracking_results.html#","page":"Tracking Results","title":"Tracking Results","text":"get_cn0","category":"page"},{"location":"tracking_results.html#Tracking.get_cn0","page":"Tracking Results","title":"Tracking.get_cn0","text":"get_cn0(results)\n\n\nGet the carrier to noise density ratio of the tracking result.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Tracking.jl-1","page":"Tracking.jl","title":"Tracking.jl","text":"","category":"section"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Modular tracking algorithm for various Global Navigation Satellite Systems (GNSS)","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Tracking.jl provides a modular and performant tracking algorithm.","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Pages = [\n  \"track.md\",\n  \"tracking_state.md\",\n  \"tracking_results.md\",\n  \"loop_filter.md\",\n  \"correlator.md\",\n  \"cn0_estimator.md\"\n]\nDepth = 1","category":"page"},{"location":"index.html#Installation-1","page":"Tracking.jl","title":"Installation","text":"","category":"section"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"julia> ]\npkg> add Tracking","category":"page"},{"location":"index.html#Usage-1","page":"Tracking.jl","title":"Usage","text":"","category":"section"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Tracking.jl processes each satellite individually. That means for each satellite a tracking state TrackingState must be initialized. From there, the track function needs to be called for every state and for every incoming signal to update the tracking parameters. The required parameters to initialize the tracking state are the GNSS system, carrier Doppler and the code phase, e.g.","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"state = TrackingState(GPSL1, carrier_doppler, code_phase)","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"These parameters are usually provided by the acquisition process of the satellite. Refer to TrackingState to find about other optional parameters.","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"The signal is tracked by","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"results = track(signal, state, prn, sample_frequency)","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"where prn is the PRN and sample_frequency the sample frequency. Refer to track to find about other optional parameters. The result contains the current state as well as some additional information such as the last valid correlator output, found data bits, etc. For each of those parameters a helper function exists to get the parameter (e.g. get_prompt(results)) - see Tracking Results. The next track function needs the updated state:","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"next_results = track(next_signal, get_state(results), prn, sample_frequency)","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Here is an example for a single PRN:","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"using Tracking\nusing Tracking: Hz, GPSL1\ncarrier_doppler = 1000Hz\ncode_phase = 50\nsample_frequency = 2.5e6Hz\nprn = 1\nstate = TrackingState(GPSL1, carrier_doppler, code_phase)\nresults = track(signal, state, prn, sample_frequency)\nnext_results = track(next_signal, get_state(results), prn, sample_frequency)","category":"page"},{"location":"index.html#Track-multiple-signals-coherently-1","page":"Tracking.jl","title":"Track multiple signals coherently","text":"","category":"section"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Tracking.jl provides a way to track multiple signals coherently, e.g. to track signals from a phased array. In that case the input signal should be a Matrix instead of a Vector, where the number of rows is equal to the number of antenna elements and the number of columns is equal to the number of samples. Furthermore, you need to specify the number of antenna elements to the tracking state:","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"state = TrackingState(GPSL1, carrier_doppler, code_phase, num_ants = NumAnts(4))","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"By default the track function will use the first antenna channel as the reference signal to drive the discriminators etc. However, an appropiate beamforming algorithm will probably suit better. For that, you'll have to pass a function post_corr_filter to the track function like the following:","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"results = track(signal, state, prn, sample_frequency, post_corr_filter = x -> x[end])","category":"page"},{"location":"index.html#Q/A-1","page":"Tracking.jl","title":"Q/A","text":"","category":"section"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"Why are the correlator values zero?","category":"page"},{"location":"index.html#","page":"Tracking.jl","title":"Tracking.jl","text":"The correlator output given in the tracking results is the correlation result after the code phase has reached the full code length or multiple of the code length depending on the maximal integration time max_integration_time (default: 1ms) you have set. If the current tracked signal does not include the end of the PRN sequency (or multiples of that), the correlator output will be zero. Moreover, a correlator output will only be valid, if the integration time has been at least the miminimum configured integration time min_integration_time (default: 0.75ms). Otherwise the correlator output will be zero as well. This case occurs at the beginning of the tracking.","category":"page"},{"location":"tracking_state.html#Tracking-State-1","page":"Tracking State","title":"Tracking State","text":"","category":"section"},{"location":"tracking_state.html#","page":"Tracking State","title":"Tracking State","text":"TrackingState","category":"page"},{"location":"tracking_state.html#Tracking.TrackingState","page":"Tracking State","title":"Tracking.TrackingState","text":"TrackingState that holds the tracking state.\n\n\n\n\n\n","category":"type"},{"location":"tracking_state.html#","page":"Tracking State","title":"Tracking State","text":"TrackingState(::Type{AbstractGNSSSystem}, carrier_doppler, code_phase)","category":"page"},{"location":"tracking_state.html#Tracking.TrackingState-Tuple{Type{AbstractGNSSSystem},Any,Any}","page":"Tracking State","title":"Tracking.TrackingState","text":"TrackingState(#temp#, carrier_doppler, code_phase; code_doppler, carrier_phase, carrier_loop_filter, code_loop_filter, sc_bit_detector, num_ants, correlator, integrated_samples, prompt_accumulator, cn0_estimator)\n\n\nConvenient TrackingState constructor. Mandatory parameters are the GNSS system, the carrier doppler carrier_doppler and the code phase code_phase. Optional parameters are\n\nCode doppler code_doppler, that defaults to carrier doppler multiplied with the code / center frequency ratio\nCarrier phase carrier_phase, that defaults to 0\nCarrier loop filter carrier_loop_filter, that defaults to the ThirdOrderBilinarLF()\nCode loop filter code_loop_filter, that defaults to the SecondOrderBilinearLF()\nNumber of antenna elemants num_ants, that defaults to NumAnts(1)\nCorrelator correlator, that defaults to get_default_correlator(...)\nIntegrated samples integrated_samples, that defaults to 0\nPrompt accumulator for bit detection prompt_accumulator, that defaults to 0\nCN0 estimator cn0_estimator, that defaults to MomentsCN0Estimator(20)\n\n\n\n\n\n","category":"method"}]
}
